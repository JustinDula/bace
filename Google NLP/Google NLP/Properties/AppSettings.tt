<#@ template language="C#" hostSpecific="true" #>
<#@ output extension=".generated.cs" #>
<#@ include file="AppSettingsTemplate.tt" #>
<# 
    //Make configuration changes here if needed
    var template = new AppSettingsTemplate() {
            IsPublic = false,               //Set to true to make the class public
            ConfigurationProject = ""       //Set to the name of another project to use its config file instead
    };

    template
            //Exclude a group of settings that you do not want generated, include an * that causes the name to match on the left
            .ExcludeSetting("aspnet:*")
            .ExcludeSetting("webpages:*")

            //Configure the interface that is generated (by default)
            /*.ConfigureInterface(settings => {
                  settings.IsPublic = false;      //Set to true to make the interface public
                  settings.Generate = true;       //Set to true to have the class generate the interface defined by Name
                  settings.Implement = true;      //Set to true to have the class implement the interface defined by Name, setting to false will disable generation as well
                  settings.Name = "IAppSettings"; //Sets the interface name, if the interface already exists then use the fully qualified name and set Generate to false
            })
            */
            
            //Configure individual settings
            /*.ConfigureSetting("MySetting", setting => {
                setting.Exclude = true;          //Set to true to exclude the setting
                setting.Name = "YourSetting";    //Set to the name to use for the backing property rather than using the config entry
                setting.Type = typeof(long);     //Overrides the type interferencing that is normally used to determine a setting's type  
            })
            */

            //Render
            .Render();
#>